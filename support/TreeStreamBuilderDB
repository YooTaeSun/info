import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;


public class TreeStreamBuilderDB {
    // Node class representing each tree element
    static class Node {
        private int id;
        private Integer upperId;
        private String name;
        private int sortNo;
        private List<Node> children = Collections.emptyList();

        public Node(int id, Integer upperId, String name, int sortNo) {
            this.id = id;
            this.upperId = upperId;
            this.name = name;
            this.sortNo = sortNo;
        }

        public int getId() { return id; }
        public Integer getUpperId() { return upperId; }
        public String getName() { return name; }
        public int getSortNo() { return sortNo; }
        public List<Node> getChildren() { return children; }
        public void setChildren(List<Node> children) { this.children = children; }
    }

    public static void main(String[] args) {
        try {
            // JDBC 드라이버 로드
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        } catch (ClassNotFoundException e) {
            System.err.println("SQLServer JDBC Driver not found. Include the driver library in the classpath.");
            e.printStackTrace();
            return;
        }

        // JDBC 연결 정보
        String url = "jdbc:sqlserver://localhost:1433;"
                + "databaseName=master;"
                + "encrypt=true;"
                + "trustServerCertificate=true;";
        String user = "sa";
        String pass = "t102061s";

        // SQL 쿼리: Tree 테이블에서 ID 기준 조회
        String sql = "SELECT id, upper_id, name, sort_no FROM dbo.[Tree] ORDER BY id";

        List<Node> nodeList = new java.util.ArrayList<>();
//        try (Connection conn = DriverManager.getConnection(url, user, pass);
//             PreparedStatement ps = conn.prepareStatement(sql);
//             ResultSet rs = ps.executeQuery()) {
//
//            // 1) DB에서 노드 로드
//            while (rs.next()) {
//                int id = rs.getInt("id");
//                int parent = rs.getInt("upper_id");
//                Integer upperId = rs.wasNull() ? null : parent;
//                String name = rs.getString("name");
//                int sortNo = rs.getInt("sort_no");
//                nodeList.add(new Node(id, upperId, name, sortNo));
//            }
//        } catch (Exception e) {
//            System.err.println("Database connection or query failed:");
//            e.printStackTrace();
//            return;
//        }
        nodeList = Arrays.asList(
                new Node(1, null, "전자제품", 1),
                new Node(2, null, "가구", 2),
                new Node(3, null, "의류", 3),
                new Node(4, 1, "컴퓨터 및 액세서리", 1),
                new Node(5, 1, "스마트폰", 2),
                new Node(6, 2, "소파", 1),
                new Node(7, 2, "테이블", 2),
                new Node(8, 3, "남성 의류", 1),
                new Node(9, 3, "여성 의류", 2),
                new Node(10, 4, "노트북", 1),
                new Node(11, 4, "데스크톱", 2),
                new Node(12, 5, "안드로이드폰", 1),
                new Node(13, 5, "아이폰", 2)
            );        
        

        // 2) 자식 관계 그룹핑 (upperId != null) 및 정렬
        Map<Integer, List<Node>> childrenMap = nodeList.stream()
            .filter(node -> node.getUpperId() != null)
            .collect(Collectors.groupingBy(Node::getUpperId));
        childrenMap.values().forEach(list ->
            list.sort(Comparator.comparing(Node::getSortNo))
        );

        // 3) 각 노드에 자식 리스트 설정
        nodeList.forEach(node ->
            node.setChildren(
                childrenMap.getOrDefault(node.getId(), Collections.emptyList())
            )
        );

        // 4) 루트 노드 리스트 및 정렬
        List<Node> roots = nodeList.stream()
            .filter(node -> node.getUpperId() == null)
            .sorted(Comparator.comparing(Node::getSortNo))
            .collect(Collectors.toList());

        // 5) 트리 구조 출력
        roots.forEach(root -> printTree(root, ""));
    }

    // 재귀적 트리 출력
    private static void printTree(Node node, String indent) {
        System.out.println(indent + node.getName() + " (ID=" + node.getId() + ")" + " (sortNo=" + node.getSortNo() + ")");
        node.getChildren().forEach(child -> printTree(child, indent + "  "));
    }
}
